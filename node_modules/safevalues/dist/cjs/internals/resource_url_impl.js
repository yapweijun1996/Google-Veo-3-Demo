"use strict";
/**
 * @license
 * Copyright Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.unwrapResourceUrl = exports.isResourceUrl = exports.createResourceUrlInternal = exports.TrustedResourceUrl = void 0;
/** @fileoverview Internal implementations of TrustedResourceUrl. */
const trusted_types_js_1 = require("./trusted_types.js");
require("../environment/dev.js");
const secrets_js_1 = require("./secrets.js");
/**
 * String that is safe to use in all URL contexts in DOM APIs and HTML
 * documents; even as a reference to resources that may load in the current
 * origin (e.g. scripts and stylesheets).
 *
 * @final
 */
class TrustedResourceUrl {
    constructor(token, value) {
        if (process.env.NODE_ENV !== 'production') {
            (0, secrets_js_1.ensureTokenIsValid)(token);
        }
        this.privateDoNotAccessOrElseWrappedResourceUrl = value;
    }
    toString() {
        // String coercion minimizes code size.
        // tslint:disable-next-line:restrict-plus-operands
        return this.privateDoNotAccessOrElseWrappedResourceUrl + '';
    }
}
exports.TrustedResourceUrl = TrustedResourceUrl;
const ResourceUrlImpl = TrustedResourceUrl;
function constructResourceUrl(value) {
    return new ResourceUrlImpl(secrets_js_1.secretToken, value);
}
/**
 * Builds a new `TrustedResourceUrl` from the given string, without enforcing
 * safety guarantees. It may cause side effects by creating a Trusted Types
 * policy. This shouldn't be exposed to application developers, and must only be
 * used as a step towards safe builders or safe constants.
 */
function createResourceUrlInternal(value) {
    // Inlining this variable can cause large codesize increases when it is a
    // large constant string. See sizetests/examples/constants for an example.
    /** @noinline */
    const noinlineValue = value;
    const policy = (0, trusted_types_js_1.getPolicy)();
    return constructResourceUrl(policy ? policy.createScriptURL(noinlineValue) : noinlineValue);
}
exports.createResourceUrlInternal = createResourceUrlInternal;
/** Checks if the given value is a `TrustedResourceUrl` instance */
function isResourceUrl(value) {
    return value instanceof TrustedResourceUrl;
}
exports.isResourceUrl = isResourceUrl;
/**
 * Returns the value of the passed `TrustedResourceUrl` object while ensuring it
 * has the correct type.
 * Using this function directly is not common. Safe types are not meant to be
 * unwrapped, but rather passed to other APIs that consume them, like the DOM
 * wrappers in safevalues/dom.
 *
 * Returns a native `TrustedScriptURL` instance typed as {toString(): string} or a string if Trusted Types are disabled.
 */
function unwrapResourceUrl(value) {
    if (isResourceUrl(value)) {
        return value
            .privateDoNotAccessOrElseWrappedResourceUrl;
    }
    else {
        let message = '';
        if (process.env.NODE_ENV !== 'production') {
            message = 'Unexpected type when unwrapping TrustedResourceUrl';
        }
        throw new Error(message);
    }
}
exports.unwrapResourceUrl = unwrapResourceUrl;
