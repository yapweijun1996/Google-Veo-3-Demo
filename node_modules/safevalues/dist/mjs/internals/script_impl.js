/**
 * @license
 * Copyright Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/** @fileoverview Internal implementations of SafeScript. */
import { getPolicy, trustedTypes } from './trusted_types.js';
import '../environment/dev.js';
import { pure } from './pure.js';
import { ensureTokenIsValid, secretToken } from './secrets.js';
/**
 * JavaScript code that is safe to evaluate and use as the content of an HTML
 * script element.
 *
 * @final
 */
export class SafeScript {
    constructor(token, value) {
        if (process.env.NODE_ENV !== 'production') {
            ensureTokenIsValid(token);
        }
        this.privateDoNotAccessOrElseWrappedScript = value;
    }
    toString() {
        // String coercion minimizes code size.
        // tslint:disable-next-line:restrict-plus-operands
        return this.privateDoNotAccessOrElseWrappedScript + '';
    }
}
const ScriptImpl = SafeScript;
function constructScript(value) {
    return new ScriptImpl(secretToken, value);
}
/**
 * Builds a new `SafeScript` from the given string, without enforcing
 * safety guarantees. It may cause side effects by creating a Trusted Types
 * policy. This shouldn't be exposed to application developers, and must only be
 * used as a step towards safe builders or safe constants.
 */
export function createScriptInternal(value) {
    // Inlining this variable can cause large codesize increases when it is a
    // large constant string. See sizetests/examples/constants for an example.
    /** @noinline */
    const noinlineValue = value;
    const policy = getPolicy();
    return constructScript(policy ? policy.createScript(noinlineValue) : noinlineValue);
}
/**
 * An empty `SafeScript` constant.
 * Unlike the functions above, using this will not create a policy.
 */
export const EMPTY_SCRIPT = /* #__PURE__ */ pure(() => constructScript(trustedTypes ? trustedTypes.emptyScript : ''));
/** Checks if the given value is a `SafeScript` instance */
export function isScript(value) {
    return value instanceof SafeScript;
}
/**
 * Returns the value of the passed `SafeScript` object while ensuring it
 * has the correct type.
 * Using this function directly is not common. Safe types are not meant to be
 * unwrapped, but rather passed to other APIs that consume them, like the DOM
 * wrappers in safevalues/dom.
 *
 * Returns a native `TrustedScript` instance typed as {toString(): string} or a string if Trusted Types are disabled.
 */
export function unwrapScript(value) {
    if (isScript(value)) {
        return value
            .privateDoNotAccessOrElseWrappedScript;
    }
    else {
        let message = '';
        if (process.env.NODE_ENV !== 'production') {
            message = 'Unexpected type when unwrapping SafeScript';
        }
        throw new Error(message);
    }
}
