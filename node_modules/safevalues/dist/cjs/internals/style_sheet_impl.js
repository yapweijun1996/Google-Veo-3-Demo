"use strict";
/**
 * @license
 * Copyright Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.unwrapStyleSheet = exports.isStyleSheet = exports.createStyleSheetInternal = exports.SafeStyleSheet = void 0;
/** @fileoverview Internal implementations of SafeStyleSheet. */
require("../environment/dev.js");
const secrets_js_1 = require("./secrets.js");
/**
 * A complete CSS style sheet, safe to use in style contexts in an HTML
 * document or DOM APIs.
 *
 * @final
 */
class SafeStyleSheet {
    constructor(token, value) {
        if (process.env.NODE_ENV !== 'production') {
            (0, secrets_js_1.ensureTokenIsValid)(token);
        }
        this.privateDoNotAccessOrElseWrappedStyleSheet = value;
    }
    toString() {
        return this.privateDoNotAccessOrElseWrappedStyleSheet;
    }
}
exports.SafeStyleSheet = SafeStyleSheet;
const StyleSheetImpl = SafeStyleSheet;
/**
 * Builds a new `SafeStyleSheet` from the given string, without enforcing
 * safety guarantees. This shouldn't be exposed to application developers, and
 * must only be used as a step towards safe builders or safe constants.
 */
function createStyleSheetInternal(value) {
    return new StyleSheetImpl(secrets_js_1.secretToken, value);
}
exports.createStyleSheetInternal = createStyleSheetInternal;
/**
 * Checks if the given value is a `SafeStyleSheet` instance.
 */
function isStyleSheet(value) {
    return value instanceof SafeStyleSheet;
}
exports.isStyleSheet = isStyleSheet;
/**
 * Returns the string value of the passed `SafeStyleSheet` object while ensuring it
 * has the correct type.
 */
function unwrapStyleSheet(value) {
    if (isStyleSheet(value)) {
        return value
            .privateDoNotAccessOrElseWrappedStyleSheet;
    }
    let message = '';
    if (process.env.NODE_ENV !== 'production') {
        message = `Unexpected type when unwrapping SafeStyleSheet, got '${value}' of type '${typeof value}'`;
    }
    throw new Error(message);
}
exports.unwrapStyleSheet = unwrapStyleSheet;
