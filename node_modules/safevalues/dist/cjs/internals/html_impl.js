"use strict";
/**
 * @license
 * Copyright Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.unwrapHtml = exports.isHtml = exports.EMPTY_HTML = exports.createHtmlInternal = exports.SafeHtml = void 0;
/** @fileoverview Internal implementations of SafeHtml. */
const trusted_types_js_1 = require("./trusted_types.js");
require("../environment/dev.js");
const pure_js_1 = require("./pure.js");
const secrets_js_1 = require("./secrets.js");
/**
 * String that is safe to use in HTML contexts in DOM APIs and HTML documents.
 *
 * @final
 */
class SafeHtml {
    constructor(token, value) {
        if (process.env.NODE_ENV !== 'production') {
            (0, secrets_js_1.ensureTokenIsValid)(token);
        }
        this.privateDoNotAccessOrElseWrappedHtml = value;
    }
    toString() {
        // String coercion minimizes code size.
        // tslint:disable-next-line:restrict-plus-operands
        return this.privateDoNotAccessOrElseWrappedHtml + '';
    }
}
exports.SafeHtml = SafeHtml;
const HtmlImpl = SafeHtml;
function constructHtml(value) {
    return new HtmlImpl(secrets_js_1.secretToken, value);
}
/**
 * Builds a new `SafeHtml` from the given string, without enforcing
 * safety guarantees. It may cause side effects by creating a Trusted Types
 * policy. This shouldn't be exposed to application developers, and must only be
 * used as a step towards safe builders or safe constants.
 */
function createHtmlInternal(value) {
    // Inlining this variable can cause large codesize increases when it is a
    // large constant string. See sizetests/examples/constants for an example.
    /** @noinline */
    const noinlineValue = value;
    const policy = (0, trusted_types_js_1.getPolicy)();
    return constructHtml(policy ? policy.createHTML(noinlineValue) : noinlineValue);
}
exports.createHtmlInternal = createHtmlInternal;
/**
 * An empty `SafeHtml` constant.
 * Unlike the functions above, using this will not create a policy.
 */
exports.EMPTY_HTML = (0, pure_js_1.pure)(() => constructHtml(trusted_types_js_1.trustedTypes ? trusted_types_js_1.trustedTypes.emptyHTML : ''));
/** Checks if the given value is a `SafeHtml` instance */
function isHtml(value) {
    return value instanceof SafeHtml;
}
exports.isHtml = isHtml;
/**
 * Returns the value of the passed `SafeHtml` object while ensuring it
 * has the correct type.
 * Using this function directly is not common. Safe types are not meant to be
 * unwrapped, but rather passed to other APIs that consume them, like the DOM
 * wrappers in safevalues/dom.
 *
 * Returns a native `TrustedHTML` instance typed as {toString(): string} or a string if Trusted Types are disabled.
 */
function unwrapHtml(value) {
    if (isHtml(value)) {
        return value.privateDoNotAccessOrElseWrappedHtml;
    }
    else {
        let message = '';
        if (process.env.NODE_ENV !== 'production') {
            message = 'Unexpected type when unwrapping SafeHtml';
        }
        throw new Error(message);
    }
}
exports.unwrapHtml = unwrapHtml;
