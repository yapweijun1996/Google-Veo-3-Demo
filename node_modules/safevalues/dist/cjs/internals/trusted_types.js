"use strict";
/**
 * @license
 * Copyright Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TEST_ONLY = exports.getPolicy = exports.trustedTypes = void 0;
/**
 * @fileoverview Utilities for interacting with Trusted Types, create and/or
 * retrieve the policy for the library.
 */
require("../environment/dev.js");
/**
 * The name of the Trusted Types policy used by the library, or empty
 * to disable Trusted Types.
 */
const configuredPolicyName = 'google#safe';
/** Mutable version of the policy name so it is testable. */
let policyName = configuredPolicyName;
/** Re-exports the global trustedTypes object for convenience. */
exports.trustedTypes = globalThis.trustedTypes;
/**
 * Mutable version of trustedTypes object so it is testable
 *
 * Note: we need to mark this as not inlineable to prevent the compiler from
 * inlining it and causing soy conformance tests to fail.
 * @noinline
 */
let trustedTypesInternal = exports.trustedTypes;
/**
 * Cached Trusted Types policy:
 *  - `null` if Trusted Types are not enabled/supported
 *  - `undefined` if the policy has not been created yet.
 */
let policy;
function createPolicy() {
    let policy = null;
    if (policyName === '') {
        // Binary is not configured to use Trusted Types.
        return policy;
    }
    if (!trustedTypesInternal) {
        return policy;
    }
    // trustedTypes.createPolicy throws in some older versions of chrome if
    // called with a name that is already registered, even in report-only mode.
    // Until the API changes, catch the error not to break the applications
    // functionally. In such case, the code will fall back to using strings.
    try {
        const identity = (x) => x;
        policy = trustedTypesInternal.createPolicy(policyName, {
            createHTML: identity,
            createScript: identity,
            createScriptURL: identity,
        });
    }
    catch (e) {
        if (process.env.NODE_ENV !== 'production') {
            throw e;
        }
    }
    return policy;
}
/**
 * Returns the Trusted Types policy used by safevalues, or null if Trusted
 * Types are not enabled/supported.
 *
 * The first call to this function will create the policy, and all subsequent
 * calls will return the same policy.
 */
function getPolicy() {
    if (policy === undefined) {
        policy = createPolicy();
    }
    return policy;
}
exports.getPolicy = getPolicy;
/** Helpers for tests. */
exports.TEST_ONLY = {
    setPolicyName(name) {
        policyName = name;
    },
    setTrustedTypes(mockTrustedTypes) {
        trustedTypesInternal = mockTrustedTypes;
    },
    resetDefaults() {
        policy = undefined;
        policyName = configuredPolicyName;
        trustedTypesInternal = exports.trustedTypes;
    },
};
