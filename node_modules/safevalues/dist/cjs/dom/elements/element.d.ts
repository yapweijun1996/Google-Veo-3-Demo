/**
 * @license
 * Copyright Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
/**
 * @fileoverview This contains safe wrappers for properties that aren't specific
 * to one kind of HTMLElement (like innerHTML), plus other setters and functions
 * that are not tied to elements (like location.href or Worker constructor).
 */
import '../../environment/dev.js';
import { SafeAttributePrefix } from '../../internals/attribute_impl.js';
import { SafeHtml } from '../../internals/html_impl.js';
import { TrustedResourceUrl } from '../../internals/resource_url_impl.js';
declare type ScriptOrStyle = HTMLScriptElement | HTMLStyleElement | SVGScriptElement | SVGStyleElement;
/**
 * Safely set {@link Element.innerHTML} on a given ShadowRoot or Element which
 * may not be a `<script>` element or a `<style>` element.
 */
export declare function setElementInnerHtml<T extends Element | ShadowRoot>(elOrRoot: Exclude<T, ScriptOrStyle>, v: SafeHtml): void;
/**
 * Safely set {@link Element.outerHTML} for the given Element.
 */
export declare function setElementOuterHtml(e: Element, v: SafeHtml): void;
/**
 * Safely call {@link Element.insertAdjacentHTML} for the given Element.
 */
export declare function elementInsertAdjacentHtml<T extends Element>(element: Exclude<T, ScriptOrStyle>, position: 'afterbegin' | 'afterend' | 'beforebegin' | 'beforeend', v: SafeHtml): void;
/**
 * Given a set of known-to-be-safe prefixes (e.g., "data-", "aria-", "js"),
 * return a setter function that allows you to set attributes on an element,
 * as long as the names of the attributes to be set has one of the prefixes.
 *
 * The returned setter ensures that setting any dangerous attribute, e.g.,
 * "src", "href" will cause an exception. This is intended to be used as the
 * safe alterantive of `Element#setAttribute`, when applications need to set
 * attributes that do not have security implications and do not have a
 * corresponding DOM property.
 */
export declare function buildPrefixedAttributeSetter(prefix: SafeAttributePrefix, ...otherPrefixes: readonly SafeAttributePrefix[]): (e: Element, attr: string, value: string) => void;
/**
 * A safe alternative to Element#setAttribute. The function takes a list of
 * `SafeAttributePrefix`, making developer intention explicit. The attribute
 * to be set must has one of the safe prefixes, otherwise the function throws
 * an Error.
 */
export declare function setElementPrefixedAttribute(attrPrefixes: readonly SafeAttributePrefix[], e: Element, attr: string, value: string): void;
/**
 * A safe alternative to Element#setAttribute.
 *
 * The function has essentially the same signature as `Element.setAttribute`,
 * but requires a safe type (or sanitizes the value) when used with a security
 * sensitive attribute. It does this by forwarding the call to the
 * element-specific setters within `safevalues/dom`.
 *
 * Note that this function doesn't currently support elements outside of the
 * html namespace & might throw if used with the wrong type of element or
 * attribute value
 *
 * If code size is a concern, consider using `setPrefixedAttribute`, or the
 * element-specific setters.
 *
 * The security sensitive element/attributes pairs are the following:
 *   - anchor#href -> forwarded to `setAnchorHref`
 *   - area#href -> forwarded to `setAreaHref`
 *   - base#href -> forwarded to `setBaseHref`
 *   - button#formaction -> forwarded to `setButtonFormaction`
 *   - embed#src -> forwarded to `setEmbedSrc`
 *   - form#action -> forwarded to `setFormAction`
 *   - iframe#src -> forwarded to `setIframeSrc`
 *   - iframe#srcdoc -> forwarded to `setIframeSrcdoc`
 *   - iframe#sandbox -> rejected, use `setIframeSrcWithIntent` or
 *       `setIframeSrcdocWithIntent` instead
 *   - input#formaction -> forwarded to `setInputFormaction`
 *   - link#href -> rejected, use `setLinkHrefAndRel` instead
 *   - link#rel -> rejected, use `setLinkHrefAndRel` instead
 *   - object#data -> forwarded to `setObjectData`
 *   - script#src -> forwarded to `setScriptSrc`
 *   - global attributes:
 *   - target -> forwarded to `el.setAttribute`
 *   - cite -> forwarded to `el.setAttribute`
 *   - poster -> forwarded to `el.setAttribute`
 *   - srcset -> forwarded to `el.setAttribute`
 *   - src -> forwarded to `el.setAttribute`
 *   - href -> forwarded to `el.setAttribute`
 *   - any attribute starting with `on` -> rejected
 *
 * Every other attribute is set as is using `element.setAttribute`
 */
export declare function setElementAttribute(el: HTMLElement, attr: string, value: string | TrustedResourceUrl | SafeHtml): void;
export {};
