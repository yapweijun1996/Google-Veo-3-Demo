"use strict";
/**
 * @license
 * Copyright Google LLC
 * SPDX-License-Identifier: Apache-2.0
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.domParserParseFromString = exports.domParserParseXml = exports.domParserParseHtml = void 0;
require("../../environment/dev.js");
const html_impl_js_1 = require("../../internals/html_impl.js");
/** Safely parses a string using the HTML parser. */
function domParserParseHtml(parser, html) {
    return domParserParseFromString(parser, html, 'text/html');
}
exports.domParserParseHtml = domParserParseHtml;
/**
 * Safely parses a string using the XML parser. If the XML document is found to
 * contain any elements from the HTML or SVG namespaces, an error is thrown for
 * security reasons.
 */
function domParserParseXml(parser, xml) {
    const doc = domParserParseFromString(parser, (0, html_impl_js_1.createHtmlInternal)(xml), 'text/xml');
    const iterator = document.createNodeIterator(doc, NodeFilter.SHOW_ELEMENT);
    let currentNode;
    while ((currentNode = iterator.nextNode())) {
        const ns = currentNode.namespaceURI;
        if (isUnsafeNamespace(ns)) {
            let message = 'unsafe XML';
            if (process.env.NODE_ENV !== 'production') {
                message += ` - attempted to parse an XML document containing an element with namespace ${ns}. Parsing HTML, SVG or MathML content is unsafe because it may lead to XSS when the content is appended to the document.`;
            }
            throw new Error(message);
        }
    }
    return doc;
}
exports.domParserParseXml = domParserParseXml;
/**
 * Checks if an element has one of: HTML, SVG or MathML namespace.
 * Appending elements with these namespaces to the document may lead to XSS.
 */
function isUnsafeNamespace(ns) {
    return (ns === 'http://www.w3.org/1999/xhtml' ||
        ns === 'http://www.w3.org/2000/svg' ||
        ns === 'http://www.w3.org/1998/Math/MathML');
}
/** Safely parses a string using the HTML or XML parser. */
function domParserParseFromString(parser, content, contentType) {
    return parser.parseFromString((0, html_impl_js_1.unwrapHtml)(content), contentType);
}
exports.domParserParseFromString = domParserParseFromString;
